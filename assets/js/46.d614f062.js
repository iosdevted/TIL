(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{410:function(t,e,r){"use strict";r.r(e);var a=r(42),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"rest、rest-api、restfulについて"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rest、rest-api、restfulについて"}},[t._v("#")]),t._v(" REST、REST API、RESTfulについて")]),t._v(" "),r("h2",{attrs:{id:"restとは"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#restとは"}},[t._v("#")]),t._v(" RESTとは")]),t._v(" "),r("p",[r("strong",[t._v("RE")]),t._v("presentational "),r("strong",[t._v("S")]),t._v("tate "),r("strong",[t._v("T")]),t._v("ransferの略")]),t._v(" "),r("p",[t._v("広く普及したWebのインフラをそのまま利用して、簡易な手順でWebサービスへのアクセスを可能にする仕組み。もともとはHTTPプロトコルの設計者の一人でもあるRoy Fielding氏によって2000年に提唱されたものである。")]),t._v(" "),r("h2",{attrs:{id:"restは軽量なwebサービス"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#restは軽量なwebサービス"}},[t._v("#")]),t._v(" RESTは軽量なWebサービス")]),t._v(" "),r("p",[t._v("RESTによるWebサービスの実装は軽量で、以下のような特徴がある。")]),t._v(" "),r("ul",[r("li",[t._v("特定のプラットフォーム（OS）に依存しない")]),t._v(" "),r("li",[t._v("特定の言語に依存しない（Java、C#、Perlなど、さまざまな言語で利用できる）")]),t._v(" "),r("li",[t._v("HTTPなどのインターネット標準プロトコルを利用")]),t._v(" "),r("li",[t._v("ファイアウォールがある環境でも容易に利用できる\n　\nただしREST自体には、セキュリティや暗号化、セッション管理、サービス品質の管理（QoS：Quality of Service）などの機能は組み込まれていない。例えば暗号化が必要なら、HTTPSを組み合わせるといった対策が別途必要になる。")])]),t._v(" "),r("p",[t._v("RESTによるデータ取得API呼び出しを図にすると次のようになる。クライアント側アプリケーションのAPIのリクエストは、HTTP GETによりサーバ側に送られる。前述した通り、呼び出すAPIはURLとして指定する。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://image.itmedia.co.jp/ait/articles/1601/13/wi-restfig02.png",alt:"alt text",title:"クライアント側"}})]),t._v(" "),r("h2",{attrs:{id:"restの4つの設計原則"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#restの4つの設計原則"}},[t._v("#")]),t._v(" RESTの4つの設計原則")]),t._v(" "),r("ol",[r("li",[t._v("セッションなどの状態管理を行わない。(やり取りされる情報はそれ自体で完結して解釈することができる)")]),t._v(" "),r("li",[t._v("情報を操作する命令の体系が予め定義・共有されている。（HTTPのGETやPOSTメソッドなど）")]),t._v(" "),r("li",[t._v("すべての情報は汎用的な構文で一意に識別される。（URLやURIなど）")]),t._v(" "),r("li",[t._v("情報の内部に、別の情報や(その情報の別の)状態へのリンクを含めることができる。")])]),t._v(" "),r("div",{staticClass:"video-responsive"},[r("iframe",{attrs:{width:"560",height:"315",src:"https://www.youtube.com/embed/7YcW25PHnAA",frameborder:"0",allow:"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}})]),t._v(" "),r("h2",{attrs:{id:"rest-apiとは"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rest-apiとは"}},[t._v("#")]),t._v(" REST APIとは")]),t._v(" "),r("p",[t._v("RESTful API(REST API)とは、Webシステムを外部から利用するためのプログラムの呼び出し規約(API)の種類の一つで、RESTと呼ばれる設計原則に従って策定されたもの。RESTそのものは適用範囲の広い抽象的なモデルだが、一般的にはRESTの考え方をWeb APIに適用したものをRESTful APIと呼んでいる。\nRESTful APIでは、URL/URIですべてのリソースを一意に識別し、セッション管理や状態管理などを行わない(ステートレス)。同じURLに対する呼び出しには常に同じ結果が返されることが期待される。\nまた、リソースの操作はHTTPメソッドによって指定(取得ならGETメソッド、書き込みならPOSTメソッド)され、結果はXMLやHTML、JSONなどで返される。また、処理結果はHTTPステータスコードで通知するという原則が含まれることもある。")]),t._v(" "),r("h2",{attrs:{id:"restfulとは"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#restfulとは"}},[t._v("#")]),t._v(" RESTfulとは")]),t._v(" "),r("ul",[r("li",[t._v("完全にREST原則に従うもは REST API と呼び、そうではない場合は RESTful API と呼ぶ")]),t._v(" "),r("li",[t._v("REST原則に従わないのであれば REST という言葉は使わす、HTTP API などと呼ぶべきだ")]),t._v(" "),r("li",[t._v("RESTful の -ful は満たすということなので、RESTful API は完全にREST原則を満たすものだ")])])])}),[],!1,null,null,null);e.default=s.exports}}]);