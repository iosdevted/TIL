(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{441:function(e,t,a){"use strict";a.r(t);var s=a(42),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"swift-type-inference-vs-type-annotation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#swift-type-inference-vs-type-annotation"}},[e._v("#")]),e._v(" [Swift] Type Inference vs Type Annotation")]),e._v(" "),a("p",[e._v("Swift is a type-safe language. A type safe language encourages you to be clear about the types of values your code can work with. If part of your code expects a String, you can’t pass it an Int by mistake.")]),e._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" welcomeMessage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("String")]),e._v("\nwelcomeMessage "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("22")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// this would create an error because you  ")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//already specified that it's going to be a String")]),e._v("\n")])])]),a("h2",{attrs:{id:"type-inference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-inference"}},[e._v("#")]),e._v(" Type Inference")]),e._v(" "),a("p",[e._v("If you don’t specify the type of value you need, Swift uses type inference to work out the appropriate type. Type inference enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide.")]),e._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" meaningOfLife "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("42")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// meaningOfLife is inferred to be of type Int")]),e._v("\nmeaningOfLife "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("55")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// it Works, because 55 is an Int")]),e._v("\n")])])]),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" meaningOfLife "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("42")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 'Type inference' happened here, we didn't specify that this an Int, the compiler itself found out.")]),e._v("\nmeaningOfLife "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("55")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// it Works, because 55 is an Int")]),e._v("\nmeaningOfLife "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"SomeString"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Because of 'Type Safety' ability you will get an ")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//error message: 'cannot assign value of type 'String' to type 'Int'' ")]),e._v("\n")])])]),a("h2",{attrs:{id:"optimize-compiler-performance-type-annotation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#optimize-compiler-performance-type-annotation"}},[e._v("#")]),e._v(" Optimize Compiler Performance(Type Annotation)")]),e._v(" "),a("p",[e._v("Type Inference takes more time than Type Annotation.")]),e._v(" "),a("p",[e._v("To optimize compiler performance, try to write the code like below.")]),e._v(" "),a("div",{staticClass:"language-swift extra-class"},[a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" names "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Ali"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Jane"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('" Taika"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID322",target:"_blank",rel:"noopener noreferrer"}},[e._v("Official Swift Document - The Basics"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://babbab2.tistory.com/14?category=828998",target:"_blank",rel:"noopener noreferrer"}},[e._v("개발자 소들이 - 타입 추론(Type Inference) vs 타입 어노테이션(Type Annotation)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);